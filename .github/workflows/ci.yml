name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run formatting check
      run: npm run format:check
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Run security audit
      run: npm run security:audit
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          quality-reports/
        retention-days: 30

  e2e:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Start application
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test
        
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start application
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test
        
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Run load tests
      run: npm run test:load
      
    - name: Run benchmark tests
      run: npm run test:benchmark
      
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: quality-reports/performance-report.json
        retention-days: 30

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start application
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test
        
    - name: Run security tests
      run: npm run test:security
      
    - name: Run vulnerability scans
      run: npm run test:security:vulnerability
      
    - name: Run penetration tests
      run: npm run test:security:penetration
      
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: quality-reports/security-report.json
        retention-days: 30

  accessibility:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start application
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test
        
    - name: Run accessibility tests
      run: npm run test:accessibility
      
    - name: Run WCAG compliance tests
      run: npm run test:accessibility:wcag
      
    - name: Upload accessibility results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-results
        path: quality-reports/accessibility-report.json
        retention-days: 30

  quality:
    runs-on: ubuntu-latest
    needs: [test, e2e, performance, security, accessibility]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: Run quality check
      run: npm run quality:check
      
    - name: Generate quality report
      run: npm run quality:report
      
    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-reports/
        retention-days: 90

  notify:
    runs-on: ubuntu-latest
    needs: [test, e2e, performance, security, accessibility, quality]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.e2e.result == 'success' && needs.performance.result == 'success' && needs.security.result == 'success' && needs.accessibility.result == 'success' && needs.quality.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.e2e.result == 'failure' || needs.performance.result == 'failure' || needs.security.result == 'failure' || needs.accessibility.result == 'failure' || needs.quality.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        echo "Test: ${{ needs.test.result }}"
        echo "E2E: ${{ needs.e2e.result }}"
        echo "Performance: ${{ needs.performance.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Accessibility: ${{ needs.accessibility.result }}"
        echo "Quality: ${{ needs.quality.result }}"
